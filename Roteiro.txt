Roteiro do que está acontecendo em cada branch

*4_CharacterService

1 - Criado a Pasta "Services"
2 - Dentro da Pasta "Service" uma outra pasta chamada "CharacterService"
3 - Dentro da Pasta "CharacterService" uma interface chamada "ICharacterService.cs"
4 - Dentro da Pasta "CharacterService" uma classe chamada "CharacterService.cs"
5 - Pegou os métodos dentro do CharacterController e substitui no CharacterService.cs
6  - Apagou a lista de persongem que tinha no CharacterController e colou no CharacterService
7 - Criado o construtor no CharacterController e os parâmetros dos serviços dentro
8 - Dentro de cada método do controller foi invocado os serviços
9 - Injeção de dependência dentro do Program.cs
STATUS: Até aqui está funcionando perfeitamente.

*5_Asynchronous_Calls
1 - Adicionamos o "Task<>" em cada parte da interface
2 - Também adicionas "Task<>" no Service, mas colocamos o "async" antes
3 - Adicionamos "Task" também no controller e async
4 - No controller também adicionamos o "await"

*6_ProperService
1 - Dentro de Models adicionamos uma classe "ServiceResponse.cs"
2 - Adicionamos ServiceResponse dentro da interface ICharacterService
3 - Fizemos a mesma modificação no CharacterService com algumas informações adicionais
4 - Adicionamos também dentro do controller
STATUS: Até aqui está funcionando perfeitamente.

*7_Dto
1 - Criamos uma pasta na raíz chamada "Dtos"
2 - Dentro dela, outra pasta chamada "Character"
3 - E duas classes "GetCharacterDto.cs" e "AddCharacterDto"
4 - Modificamos a Interface, o Service e o controller
STATUS: O arquivo não está funcionando, pois é preciso configurar o AutoMappe[disableRipple]="true"

*8_AutoMapper
 1 - Instalamos o AutoMapper
2 - Injeção do AutoMapper no "Program.cs"
3 - Criamos um construtor em "CharacterService" e colocamos o AutoMapper como parâmetro
4 - Fizemos algumas modificações dentro dos métodos de "CharacterService"
5 - Na Raiz do Programa criamos um arquivo "AutoMapperProfile"

*9_PUT_Method
1 - Criamos o Método na Interface
2 - Criamos o "UpdateCharacterDto"
3 - Implementamos no Service
4 - E colocamos no controller
STATUS: O arquivo não está funcionando, pois é preciso configurar algo na próxima branch

*10_Put_With_AutoMapper
1 - Modificamos o CharacterService
2 - MOdificamos o AutoMapperProfile
STATUS: Até aqui está funcionando perfeitamente.

*11_Delete_Method
1 - Adicionamos o método na interface
2 - Implementamos no Service
3 - E anexamos no Controller
STATUS: Até aqui está funcionando perfeitamente.

*11_EntityFramewok
1 - Instalamos o "Microsoft.EntityFrameworkCore.SqlServer"
2 - Instalamos o "Microsoft.EntityFrameworkCore.Design"
3 - Criamos uma pasta chamada Data
4 - Dentro da pasta Data adicionaoms o arquivo "DataContext.cs"
5 - Criado a Conexão "ConnectionString" no "appsettings.json"
6 - E Colocamos a conexão por meio de injeção em "Program.cs"

*12_Migrations
1 - Criamos a primeira migração

*13_Get_Implementations
1 - Adicionamos DataContext no Service
2 - Modificamos o método Get no Service
3 - Adicionamos no Banco de Dados alguns personagens manualmente

*14_Post_Implementations
1 - Modificamos o método Post no Service

*15_Put_Implementations
1 - Modificamos o método Put no Service

